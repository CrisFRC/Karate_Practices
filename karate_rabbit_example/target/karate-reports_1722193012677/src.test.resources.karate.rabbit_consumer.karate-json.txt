{"failedCount":1,"prefixedPath":"src\/test\/resources\/karate\/rabbit_consumer.feature","packageQualifiedName":"src.test.resources.karate.rabbit_consumer","loopIndex":-1,"relativePath":"src\/test\/resources\/karate\/rabbit_consumer.feature","scenarioResults":[{"sectionIndex":0,"stepResults":[{"result":{"nanos":87304700,"millis":87.3047,"status":"passed"},"step":{"background":true,"line":5,"prefix":"*","index":0,"text":"def QueueConsumer = Java.type('co.com.karate.Consumer')"}},{"result":{"nanos":111183100,"millis":111.1831,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":1,"text":"def consumer = new QueueConsumer()"}},{"result":{"nanos":8335800,"millis":8.3358,"status":"passed"},"step":{"comments":["#in real world, this can be a different microservice which generates an event","# Consumer should get \"triggered\"\/ react on an event"],"line":12,"prefix":"*","index":0,"text":"def event = consumer.listen()"}},{"result":{"nanos":3655300,"millis":3.6553,"status":"passed"},"step":{"line":13,"prefix":"*","index":1,"text":"def message = consumer.getList()"}},{"result":{"nanos":26517500,"millis":26.5175,"status":"passed"},"step":{"line":14,"prefix":"*","index":2,"text":"def person = message.map(x => karate.fromString(x))"}},{"result":{"nanos":30521000,"millis":30.521,"status":"passed"},"step":{"line":15,"prefix":"*","index":3,"text":"print person"},"stepLog":"13:55:15.360 [print] [\n]\n \n"},{"result":{"nanos":32384800,"errorMessage":"match failed: EQUALS\n  $ | actual path does not exist (STRING:STRING)\n  '#notpresent'\n  'Person1'\n\nsrc\/test\/resources\/karate\/rabbit_consumer.feature:17","millis":32.3848,"status":"failed"},"step":{"comments":["#Asserting if the 1st persons name is Person1"],"line":17,"prefix":"*","index":4,"text":"match person[0].name == \"Person1\""},"stepLog":"13:55:15.393 src\/test\/resources\/karate\/rabbit_consumer.feature:17\n* match person[0].name == \"Person1\"\nmatch failed: EQUALS\n  $ | actual path does not exist (STRING:STRING)\n  '#notpresent'\n  'Person1'\n\nsrc\/test\/resources\/karate\/rabbit_consumer.feature:17\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["#Asserting if the there is any name = Person10"],"line":19,"prefix":"*","index":5,"text":"match person[*].name contains 'Person10'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["#Asserting if the 8th persons age is 37"],"line":21,"prefix":"*","index":6,"text":"match person[8].age == 37"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["#Asserting if the number of persons = 10"],"line":23,"prefix":"*","index":7,"text":"match person == '#[10]'"}}],"line":9,"description":"","durationMillis":299.9022,"failed":true,"error":"match failed: EQUALS\n  $ | actual path does not exist (STRING:STRING)\n  '#notpresent'\n  'Person1'\n\nsrc\/test\/resources\/karate\/rabbit_consumer.feature:17","executorName":"main","name":"Verify event","startTime":1722192915080,"refId":"[1:9]","endTime":1722192915393,"exampleIndex":-1}],"callDepth":0,"name":"Verify events via RabbitMQ","description":"","resultDate":"2024-07-28 01:55:15 p. m.","durationMillis":299.9022,"passedCount":0}